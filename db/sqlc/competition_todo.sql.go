// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: competition_todo.sql

package db

import (
	"context"
)

const createCompetitionTodo = `-- name: CreateCompetitionTodo :one
INSERT INTO competition_todos (competition_id, todo_id)
VALUES ($1, $2)
RETURNING id, competition_id, todo_id, is_completed, created_at, updated_at
`

type CreateCompetitionTodoParams struct {
	CompetitionID int64 `json:"competition_id"`
	TodoID        int64 `json:"todo_id"`
}

func (q *Queries) CreateCompetitionTodo(ctx context.Context, arg CreateCompetitionTodoParams) (CompetitionTodo, error) {
	row := q.db.QueryRowContext(ctx, createCompetitionTodo, arg.CompetitionID, arg.TodoID)
	var i CompetitionTodo
	err := row.Scan(
		&i.ID,
		&i.CompetitionID,
		&i.TodoID,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompetitionTodos = `-- name: GetCompetitionTodos :many
SELECT id, competition_id, todo_id, is_completed, created_at, updated_at FROM competition_todos WHERE competition_id = $1
`

func (q *Queries) GetCompetitionTodos(ctx context.Context, competitionID int64) ([]CompetitionTodo, error) {
	rows, err := q.db.QueryContext(ctx, getCompetitionTodos, competitionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompetitionTodo
	for rows.Next() {
		var i CompetitionTodo
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.TodoID,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetitionTodo = `-- name: UpdateCompetitionTodo :one
UPDATE competition_todos SET is_completed = $1 WHERE id = $2 RETURNING id, competition_id, todo_id, is_completed, created_at, updated_at
`

type UpdateCompetitionTodoParams struct {
	IsCompleted bool  `json:"is_completed"`
	ID          int64 `json:"id"`
}

func (q *Queries) UpdateCompetitionTodo(ctx context.Context, arg UpdateCompetitionTodoParams) (CompetitionTodo, error) {
	row := q.db.QueryRowContext(ctx, updateCompetitionTodo, arg.IsCompleted, arg.ID)
	var i CompetitionTodo
	err := row.Scan(
		&i.ID,
		&i.CompetitionID,
		&i.TodoID,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
