// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  name,
  challenge_id,
  period,
  point
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, challenge_id, period, point, created_at, updated_at
`

type CreateTodoParams struct {
	Name        string  `json:"name"`
	ChallengeID int64   `json:"challenge_id"`
	Period      string  `json:"period"`
	Point       float64 `json:"point"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Name,
		arg.ChallengeID,
		arg.Period,
		arg.Point,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChallengeID,
		&i.Period,
		&i.Point,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, name, challenge_id, period, point, created_at, updated_at FROM todos WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChallengeID,
		&i.Period,
		&i.Point,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodosByChallenge = `-- name: GetTodosByChallenge :many
SELECT id, name, challenge_id, period, point, created_at, updated_at FROM todos WHERE challenge_id = $1
`

func (q *Queries) GetTodosByChallenge(ctx context.Context, challengeID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByChallenge, challengeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ChallengeID,
			&i.Period,
			&i.Point,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
